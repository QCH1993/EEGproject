# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'eegmainwindow.ui'
#
# Created by: PyQt5 UI code generator 5.5.1
#
# WARNING! All changes made in this file will be lost!

from PyQt5 import QtCore, QtGui, QtWidgets

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(712, 488)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.centralwidget.sizePolicy().hasHeightForWidth())
        self.centralwidget.setSizePolicy(sizePolicy)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.centralwidget)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.splitter = QtWidgets.QSplitter(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.splitter.sizePolicy().hasHeightForWidth())
        self.splitter.setSizePolicy(sizePolicy)
        self.splitter.setOrientation(QtCore.Qt.Horizontal)
        self.splitter.setObjectName("splitter")
        self.DataInfo = QtWidgets.QWidget(self.splitter)
        self.DataInfo.setMinimumSize(QtCore.QSize(200, 80))
        self.DataInfo.setMouseTracking(True)
        self.DataInfo.setAutoFillBackground(True)
        self.DataInfo.setObjectName("DataInfo")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.DataInfo)
        self.verticalLayout.setObjectName("verticalLayout")
        self.datainfo_label = QtWidgets.QLabel(self.DataInfo)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.datainfo_label.sizePolicy().hasHeightForWidth())
        self.datainfo_label.setSizePolicy(sizePolicy)
        self.datainfo_label.setWordWrap(True)
        self.datainfo_label.setObjectName("datainfo_label")
        self.verticalLayout.addWidget(self.datainfo_label)
        self.Overview = MatplotlibWidget(self.splitter)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(1)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Overview.sizePolicy().hasHeightForWidth())
        self.Overview.setSizePolicy(sizePolicy)
        self.Overview.setStyleSheet("background-color: rgba(170, 170, 255, 50);")
        self.Overview.setObjectName("Overview")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.Overview)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.horizontalLayout_2.addWidget(self.splitter)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 712, 25))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuImport_EEG_data = QtWidgets.QMenu(self.menuFile)
        self.menuImport_EEG_data.setObjectName("menuImport_EEG_data")
        self.menuImport_sensor_location = QtWidgets.QMenu(self.menuFile)
        self.menuImport_sensor_location.setObjectName("menuImport_sensor_location")
        self.menuSave_data = QtWidgets.QMenu(self.menuFile)
        self.menuSave_data.setObjectName("menuSave_data")
        self.menuEdit = QtWidgets.QMenu(self.menubar)
        self.menuEdit.setObjectName("menuEdit")
        self.menuTools = QtWidgets.QMenu(self.menubar)
        self.menuTools.setObjectName("menuTools")
        self.menuPlot = QtWidgets.QMenu(self.menubar)
        self.menuPlot.setObjectName("menuPlot")
        self.menuDifferent_freqency_bands = QtWidgets.QMenu(self.menuPlot)
        self.menuDifferent_freqency_bands.setObjectName("menuDifferent_freqency_bands")
        self.menuSensor_location = QtWidgets.QMenu(self.menuPlot)
        self.menuSensor_location.setObjectName("menuSensor_location")
        self.menuDifferent_frequency_bands_brainhot = QtWidgets.QMenu(self.menuPlot)
        self.menuDifferent_frequency_bands_brainhot.setObjectName("menuDifferent_frequency_bands_brainhot")
        self.menuHelp = QtWidgets.QMenu(self.menubar)
        self.menuHelp.setObjectName("menuHelp")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.toolBar = QtWidgets.QToolBar(MainWindow)
        self.toolBar.setObjectName("toolBar")
        MainWindow.addToolBar(QtCore.Qt.TopToolBarArea, self.toolBar)
        self.actionExit = QtWidgets.QAction(MainWindow)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/myicon/exit.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionExit.setIcon(icon)
        self.actionExit.setObjectName("actionExit")
        self.actionFrom_vhdr_file = QtWidgets.QAction(MainWindow)
        self.actionFrom_vhdr_file.setObjectName("actionFrom_vhdr_file")
        self.actionFrom_ced_file = QtWidgets.QAction(MainWindow)
        self.actionFrom_ced_file.setObjectName("actionFrom_ced_file")
        self.actionAs_csv_file = QtWidgets.QAction(MainWindow)
        self.actionAs_csv_file.setObjectName("actionAs_csv_file")
        self.actionData_info = QtWidgets.QAction(MainWindow)
        self.actionData_info.setObjectName("actionData_info")
        self.actionAbout_this_data = QtWidgets.QAction(MainWindow)
        self.actionAbout_this_data.setObjectName("actionAbout_this_data")
        self.actionRaw_data_seperatly = QtWidgets.QAction(MainWindow)
        self.actionRaw_data_seperatly.setObjectName("actionRaw_data_seperatly")
        self.actionTheta_4_7Hz = QtWidgets.QAction(MainWindow)
        self.actionTheta_4_7Hz.setObjectName("actionTheta_4_7Hz")
        self.actionAlpha_8_13Hz = QtWidgets.QAction(MainWindow)
        self.actionAlpha_8_13Hz.setObjectName("actionAlpha_8_13Hz")
        self.actionBeta_14_30Hz = QtWidgets.QAction(MainWindow)
        self.actionBeta_14_30Hz.setObjectName("actionBeta_14_30Hz")
        self.actionGamma_32_64Hz = QtWidgets.QAction(MainWindow)
        self.actionGamma_32_64Hz.setObjectName("actionGamma_32_64Hz")
        self.actionData_edit = QtWidgets.QAction(MainWindow)
        self.actionData_edit.setObjectName("actionData_edit")
        self.actionSensor_edit = QtWidgets.QAction(MainWindow)
        self.actionSensor_edit.setObjectName("actionSensor_edit")
        self.actionPre_Filter = QtWidgets.QAction(MainWindow)
        self.actionPre_Filter.setObjectName("actionPre_Filter")
        self.actionFilter_different_bands = QtWidgets.QAction(MainWindow)
        self.actionFilter_different_bands.setObjectName("actionFilter_different_bands")
        self.actionNormalization = QtWidgets.QAction(MainWindow)
        self.actionNormalization.setObjectName("actionNormalization")
        self.actionFeature_extraction = QtWidgets.QAction(MainWindow)
        self.actionFeature_extraction.setObjectName("actionFeature_extraction")
        self.actionAbout_this_app = QtWidgets.QAction(MainWindow)
        self.actionAbout_this_app.setObjectName("actionAbout_this_app")
        self.actionFunction_summary = QtWidgets.QAction(MainWindow)
        self.actionFunction_summary.setObjectName("actionFunction_summary")
        self.actionStandard_usage_steps = QtWidgets.QAction(MainWindow)
        self.actionStandard_usage_steps.setObjectName("actionStandard_usage_steps")
        self.action2_D = QtWidgets.QAction(MainWindow)
        self.action2_D.setObjectName("action2_D")
        self.action3_D = QtWidgets.QAction(MainWindow)
        self.action3_D.setObjectName("action3_D")
        self.actionAll_after_pre_filter = QtWidgets.QAction(MainWindow)
        self.actionAll_after_pre_filter.setObjectName("actionAll_after_pre_filter")
        self.actionTheta_4_7Hz_2 = QtWidgets.QAction(MainWindow)
        self.actionTheta_4_7Hz_2.setObjectName("actionTheta_4_7Hz_2")
        self.actionAll_after_pre_filter_3 = QtWidgets.QAction(MainWindow)
        self.actionAll_after_pre_filter_3.setObjectName("actionAll_after_pre_filter_3")
        self.actionTheta_4_7Hz_3 = QtWidgets.QAction(MainWindow)
        self.actionTheta_4_7Hz_3.setObjectName("actionTheta_4_7Hz_3")
        self.actionStatic_fig = QtWidgets.QAction(MainWindow)
        self.actionStatic_fig.setObjectName("actionStatic_fig")
        self.actionDynamic_fig = QtWidgets.QAction(MainWindow)
        self.actionDynamic_fig.setObjectName("actionDynamic_fig")
        self.actionStatic_fig_2 = QtWidgets.QAction(MainWindow)
        self.actionStatic_fig_2.setObjectName("actionStatic_fig_2")
        self.actionDynamic_fig_2 = QtWidgets.QAction(MainWindow)
        self.actionDynamic_fig_2.setObjectName("actionDynamic_fig_2")
        self.menuImport_EEG_data.addAction(self.actionFrom_vhdr_file)
        self.menuImport_sensor_location.addAction(self.actionFrom_ced_file)
        self.menuSave_data.addAction(self.actionAs_csv_file)
        self.menuFile.addAction(self.menuImport_EEG_data.menuAction())
        self.menuFile.addAction(self.menuImport_sensor_location.menuAction())
        self.menuFile.addAction(self.menuSave_data.menuAction())
        self.menuFile.addAction(self.actionExit)
        self.menuEdit.addAction(self.actionData_info)
        self.menuEdit.addAction(self.actionAbout_this_data)
        self.menuEdit.addAction(self.actionData_edit)
        self.menuEdit.addAction(self.actionSensor_edit)
        self.menuTools.addAction(self.actionPre_Filter)
        self.menuTools.addAction(self.actionFilter_different_bands)
        self.menuTools.addAction(self.actionNormalization)
        self.menuTools.addAction(self.actionFeature_extraction)
        self.menuDifferent_freqency_bands.addAction(self.actionAll_after_pre_filter)
        self.menuDifferent_freqency_bands.addAction(self.actionTheta_4_7Hz)
        self.menuDifferent_freqency_bands.addAction(self.actionAlpha_8_13Hz)
        self.menuDifferent_freqency_bands.addAction(self.actionBeta_14_30Hz)
        self.menuDifferent_freqency_bands.addAction(self.actionGamma_32_64Hz)
        self.menuSensor_location.addAction(self.action2_D)
        self.menuSensor_location.addAction(self.action3_D)
        self.menuDifferent_frequency_bands_brainhot.addAction(self.actionStatic_fig_2)
        self.menuDifferent_frequency_bands_brainhot.addAction(self.actionDynamic_fig_2)
        self.menuPlot.addAction(self.menuSensor_location.menuAction())
        self.menuPlot.addAction(self.actionRaw_data_seperatly)
        self.menuPlot.addAction(self.menuDifferent_freqency_bands.menuAction())
        self.menuPlot.addAction(self.menuDifferent_frequency_bands_brainhot.menuAction())
        self.menuHelp.addAction(self.actionAbout_this_app)
        self.menuHelp.addAction(self.actionFunction_summary)
        self.menuHelp.addAction(self.actionStandard_usage_steps)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuEdit.menuAction())
        self.menubar.addAction(self.menuTools.menuAction())
        self.menubar.addAction(self.menuPlot.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())
        self.toolBar.addAction(self.actionExit)

        self.retranslateUi(MainWindow)
        self.actionExit.triggered.connect(MainWindow.close)
        self.actionFrom_vhdr_file.triggered.connect(self.datainfo_label.update)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.datainfo_label.setText(_translate("MainWindow", "<html><head/><body><p>Data_information:</p><p>Name:</p><p>Datapoints:</p><p>Sampling rate:</p><p><br/></p></body></html>"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.menuImport_EEG_data.setTitle(_translate("MainWindow", "Import EEG data"))
        self.menuImport_sensor_location.setTitle(_translate("MainWindow", "Import sensor location"))
        self.menuSave_data.setTitle(_translate("MainWindow", "Save data"))
        self.menuEdit.setTitle(_translate("MainWindow", "Edit"))
        self.menuTools.setTitle(_translate("MainWindow", "Tools"))
        self.menuPlot.setTitle(_translate("MainWindow", "Visualization"))
        self.menuDifferent_freqency_bands.setTitle(_translate("MainWindow", "Different freqency bands waves"))
        self.menuSensor_location.setTitle(_translate("MainWindow", "Sensor location"))
        self.menuDifferent_frequency_bands_brainhot.setTitle(_translate("MainWindow", "Different frequency bands brainhot"))
        self.menuHelp.setTitle(_translate("MainWindow", "Help"))
        self.toolBar.setWindowTitle(_translate("MainWindow", "toolBar"))
        self.actionExit.setText(_translate("MainWindow", "Exit"))
        self.actionExit.setShortcut(_translate("MainWindow", "Alt+Q"))
        self.actionFrom_vhdr_file.setText(_translate("MainWindow", "From .vhdr file"))
        self.actionFrom_ced_file.setText(_translate("MainWindow", "From .ced file"))
        self.actionAs_csv_file.setText(_translate("MainWindow", "as .csv file"))
        self.actionData_info.setText(_translate("MainWindow", "Data info"))
        self.actionAbout_this_data.setText(_translate("MainWindow", "About this data"))
        self.actionRaw_data_seperatly.setText(_translate("MainWindow", "Raw data"))
        self.actionTheta_4_7Hz.setText(_translate("MainWindow", "Theta (4-7Hz)"))
        self.actionAlpha_8_13Hz.setText(_translate("MainWindow", "Alpha(8-13Hz)"))
        self.actionBeta_14_30Hz.setText(_translate("MainWindow", "Beta(14-30Hz)"))
        self.actionGamma_32_64Hz.setText(_translate("MainWindow", "Gamma(32-64Hz)"))
        self.actionData_edit.setText(_translate("MainWindow", "Data edit"))
        self.actionSensor_edit.setText(_translate("MainWindow", "Sensor edit"))
        self.actionPre_Filter.setText(_translate("MainWindow", "Pre-Filter"))
        self.actionFilter_different_bands.setText(_translate("MainWindow", "Filter different bands"))
        self.actionNormalization.setText(_translate("MainWindow", "Normalization"))
        self.actionFeature_extraction.setText(_translate("MainWindow", "Feature extraction"))
        self.actionAbout_this_app.setText(_translate("MainWindow", "About this app"))
        self.actionFunction_summary.setText(_translate("MainWindow", "Function summary"))
        self.actionStandard_usage_steps.setText(_translate("MainWindow", "Standard usage steps"))
        self.action2_D.setText(_translate("MainWindow", "2-D"))
        self.action3_D.setText(_translate("MainWindow", "3-D"))
        self.actionAll_after_pre_filter.setText(_translate("MainWindow", "All(after pre-filter)"))
        self.actionTheta_4_7Hz_2.setText(_translate("MainWindow", "Theta(4-7Hz)"))
        self.actionAll_after_pre_filter_3.setText(_translate("MainWindow", "All(after pre-filter)"))
        self.actionTheta_4_7Hz_3.setText(_translate("MainWindow", "Theta(4-7Hz)"))
        self.actionStatic_fig.setText(_translate("MainWindow", "Static fig"))
        self.actionDynamic_fig.setText(_translate("MainWindow", "Dynamic fig"))
        self.actionStatic_fig_2.setText(_translate("MainWindow", "Static fig"))
        self.actionDynamic_fig_2.setText(_translate("MainWindow", "Dynamic fig"))

from MatplotlibWidget import MatplotlibWidget
import icon_rc
# import img_rc
